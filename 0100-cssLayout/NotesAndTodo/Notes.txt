From website: http://learnlayout.com/

1. The display property
==========================
Every element has a default display value depending on what type of element it is.
The default for most elements is usually block or inline.
Inline elements can be used inside block level elements and they don't disrupt the flow of text.

Example of block-level elements: p, div, form, header, footer, section, ...
Example of inline elements: span, a

common values for the display property:
- block
- inline
- none
- list-item
- table
- inline-block
- flex

display: none; will render the page as if the element does not exist.
visibility: hidden; will hide the element, but the element will still take up the space.

Common usage of converting block-level element to inline - li for horizontal menus.  

2. margin: auto; and max-width
==============================
margin: 100px auto 0px auto;

#main {
    width: 600px;
    margin: 0 auto;
}

We fix the width and set the right and left to auto to center the container.
Fixing the width will make the browser put a horizontal scrollbar if the width of the container is greater than the width of the browser.

=> Not effective on mobile device. We use max-width => no horizontak scrollbar

#main {
    max-width: 600px;
    margin: 0 auto;
}

3. box-model
==============
Note: Width is the width of the content, not of the container.
This simply shows that additional space is taken by the box-model (border + padding + width)
 To see the difference:

p.simple {
    width: 500px;
    margin: 20px auto;
    color: green;
    border: 1px solid red;
}

p.fancy {
    width: 500px;
    margin: 20px auto;
    padding: 100px;
    color: blue;
    border: 10px solid red;
}

This requires some maths to calculate and is unintuitive.


4. box-sizing: border-box
=========================
This ensures that the padding and border of the element no longer increase the box overall width.
No calculation required.

.simple {
    width: 500px;
    margin: 20px auto;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.fancy {
    width: 500px;
    margin: 20px auto;
    padding: 50px;
    border: solid blue 10px;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

Web designers use it on all their pages:
* {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

5.0 Positioning
===============
a. static
----------
.static {
    position: static
}

- Static is the default value for the position property of an element.
- An element with position: static; is not positioned in any special way.
- A static element is said to be not positioned and an element with its position set to anything else is said to be positioned.

b. relative
-------------
- Relative behaves the same as static unless you add some extra properties.
- Setting the top, right, bottom and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position.
- Other content will not be adjusted to fit into any gap left by the element

.relative1 {
    position: relative;
}
.relative2 {
    position: relative;
    top: -20px;
    left: 20px;
    background-color: white;
    width: 500px;
}

c. fixed
---------
- A fixed element is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. 
- As with relative, the top, right, bottom, and left properties are used.
- A fixed element does not leave a gap in the page where it would normally have been located. 

.fixed {
    position: fixed;
    bottom: 0;
    right: 0;
    width: 200px;
    background-color: white;
}

d. absolute
------------
- absolute behaves like fixed except relative to the nearest positioned ancestor instead of relative to the viewport.
- If an absolutely positioned element has no positioned ancestors (i.e  no ancestor has a position property or ancestor has a static position), 
it uses the document body and still moves along with the page scrolling - static mean that the element is not positioned.

.relative {
    position: relative;
    width: 600px;
    height: 400px;
}
.absolute {
    position: absolute;
    top: 120px;
    right: 0;
    width: 300px;
    height: 200px;
}


5.1 Positioning Example 1
==========================
- The margin-left style for sections makes sure there is room for the nav. Otherwise the absolute and static elements would overlap.
- This example works because the container is taller than the nav. If it wasn't, the nav would overflow outside of its container.

6.1 - float and clear
=======================
6.2 - Overflowing container
============================
6.3 - using clear fix
=======================
6.4 - Navigation example using float
=====================================
6.5 - Percentage width - responsive image
==========================================
6.6 - Percentage width - responsive image using max- and min-width
===================================================================
6.7 - Percentage width - navigation example 
============================================


6.8 - Media queries
====================
@media screen and (min-width:600px) {
    nav {
            float: left;
            width: 25%;
        }
    section {
                margin-left: 25%;
            }
}

@media screen and (max-width:599px) {
    nav li {
                display: inline;
            }
}

This ensures that the menu is inline on smaller screens.



7.1 Grid layout with floats
=============================
 - We give a width and a height to our elements
 - Use overflow auto to put a scroll bar if height is not sufficient
 